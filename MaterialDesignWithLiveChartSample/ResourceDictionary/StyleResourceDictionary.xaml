<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:lvchart="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
                    xmlns:ms="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:behaviors="clr-namespace:MaterialDesignWithLiveChartSample.Behavior"
                    xmlns:views="clr-namespace:MaterialDesignWithLiveChartSample">
    <!--Material Design Area-->
    <!--Window Bar-->
    <Style x:Key="MaterialDesignWindowCustom" TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
        <Style.Resources>
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                </ResourceDictionary.MergedDictionaries>
                <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            </ResourceDictionary>
        </Style.Resources>
        <Setter Property="WindowStyle" Value="SingleBorderWindow" />
        <!-- TODO: This causes clipping when the window is maximized -->
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome GlassFrameThickness="3" ResizeBorderThickness="5" NonClientFrameEdges="None" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" >
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="7"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <ContentPresenter 
                                Grid.Row="1" 
                                Content="{TemplateBinding Content}" 
                                ContentTemplate="{TemplateBinding ContentTemplate}" />

                            <ResizeGrip 
                                HorizontalAlignment="Right" 
                                x:Name="WindowResizeGrip" 
                                VerticalAlignment="Bottom" 
                                IsTabStop="False" 
                                Visibility="Collapsed"
                                Grid.Row="1" />
                            <!--Window Height:Padding-->
                            <md:ColorZone Padding="2" Mode="Standard" md:ElevationAssist.Elevation="Dp2"
                                          Grid.Row="0">
                                <ms:Interaction.Triggers>
                                    <ms:EventTrigger EventName="MouseDoubleClick" >
                                        <ms:InvokeCommandAction Command="{x:Static views:MaterialDesignWindowCustom.ToggleMaximize}"
                                                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"/>
                                    </ms:EventTrigger>
                                </ms:Interaction.Triggers>
                                <ms:Interaction.Behaviors>
                                    <behaviors:DragWindowBehavior />
                                    <behaviors:TemplateBindingBehavior TargetTemplatePropertyPath="(WindowChrome.WindowChrome).(WindowChrome.CaptionHeight)" SourceProperty="ActualHeight"/>
                                </ms:Interaction.Behaviors>
                                <Grid>
                                    <ContentControl x:Name="HeaderContent" FontSize="22" Content="{Binding Path=(views:MaterialDesignWindowCustom.HeaderContent), RelativeSource={RelativeSource TemplatedParent}}">
                                        <ContentControl.Style>
                                            <Style TargetType="ContentControl">
                                                <Style.Triggers>
                                                    <Trigger Property="Content" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>
                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="22" Text="{TemplateBinding Title}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Path=(views:MaterialDesignWindowCustom.HeaderContent), RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                    <Image Source="{TemplateBinding Icon}" HorizontalAlignment="Left" MaxHeight="32"/>
                                    <StackPanel HorizontalAlignment="Right" Orientation="Horizontal" WindowChrome.IsHitTestVisibleInChrome="True">
                                        <StackPanel.Resources>
                                            <Style TargetType="Button" BasedOn="{StaticResource MaterialDesignFlatButton}" >
                                                <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" />
                                            </Style>
                                        </StackPanel.Resources>
                                        <Button Command="{x:Static views:MaterialDesignWindowCustom.Minimize}"
                                                Visibility="{Binding Path=(views:WindowEX.ShowMinimizeButton), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <md:PackIcon Kind="WindowMinimize" />
                                        </Button>
                                        <Button Command="{x:Static views:MaterialDesignWindowCustom.ToggleMaximize}"
                                                Visibility="{Binding Path=(views:WindowEX.ShowMaximizeButton), RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                            <Button.Style>
                                                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                    <Setter Property="Content">
                                                        <Setter.Value>
                                                            <md:PackIcon Kind="WindowMaximize" />
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}" Value="Maximized">
                                                            <Setter Property="Content">
                                                                <Setter.Value>
                                                                    <md:PackIcon Kind="WindowRestore" />
                                                                </Setter.Value>
                                                            </Setter>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </Button.Style>
                                        </Button>
                                        <Button Command="{x:Static views:MaterialDesignWindowCustom.Close}">
                                            <md:PackIcon Kind="Power" />
                                        </Button>
                                    </StackPanel>
                                </Grid>
                            </md:ColorZone>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                                <Condition Property="WindowState" Value="Normal"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Text Menu-->
    <Style x:Key="MenuItemStyle1" TargetType="{x:Type MenuItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
        <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Padding" Value="7,2,8,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Padding" Value="2,3,2,3"/>
                <Setter Property="Template" Value="{DynamicResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Padding" Value="2,3,2,3"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--ToolBar Menu-->
    <Style x:Key="toolbarMenu" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MaterialDesignMenuItem}">
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="HeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <DockPanel Background="Transparent">
                                <md:PackIcon Kind="MenuDown" DockPanel.Dock="Right" VerticalAlignment="Center" 
                                                             Foreground="{DynamicResource PrimaryHueDarkBrush}"/>
                                <ContentPresenter Content="{Binding}" Margin="5,0"/>
                            </DockPanel>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Padding" Value="0" />
                <Setter Property="Width" Value="80" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Text Block-->
    <Style x:Key="TextBlockAccentTitle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="FontSize" Value="25"/>
    </Style>
    <Style x:Key="TextBlockPaperTitle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
        <Setter Property="FontSize" Value="25"/>
    </Style>
    <Style x:Key="TextBlockAccentContent" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <!--Text Box-->
    <Style x:Key="TextBoxAccentContent" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBoxBase}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="MinWidth" Value="30"/>
    </Style>
    <!--PasswordBox-->
    <Style x:Key="PasswordBoxAccent" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialDesignPasswordBox}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}"/>
        <Setter Property="FontSize" Value="15"/>
    </Style>
    <!--Button-->
    <!--Rounded Button-->
    <Style x:Key="ButtonRoundedPrimary" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniButton}">
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="FontSize" Value="15"/>
    </Style>
    <Style x:Key="ButtonRoundedSecond" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFloatingActionMiniSecondaryButton}">
        <Setter Property="Width" Value="auto"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="FontSize" Value="15"/>
    </Style>
    <!--Check Box-->
    <Style x:Key="CheckBoxAccent" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MaterialDesignAccentCheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="md:CheckBoxAssist.CheckBoxSize" Value="20"/>
        <Setter Property="FontSize" Value="20"/>
    </Style>
    <!--DataGrid-->
    <Style x:Key="DataGridAccent" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MaterialDesignDataGrid}">
        <Style.Resources>
            <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </Style>
        </Style.Resources>
    </Style>
    
    <!--Live Chart Area-->
    <!--Cartesian Chart Base-->
    <Style x:Key="CartesianChartStyleBase" TargetType="{x:Type lvchart:CartesianChart}">
        <Style.Resources>
            <Style TargetType="lvchart:DefaultTooltip">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </Style>
        </Style.Resources>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
    </Style>
    <!--Line Chart-->
    <Style x:Key="LineChartStyle" TargetType="{x:Type lvchart:CartesianChart}" BasedOn="{StaticResource CartesianChartStyleBase}">
        <Style.Resources>
            <Style TargetType="lvchart:Axis">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </Style>
            <Style TargetType="lvchart:LineSeries">
                <Setter Property="PointGeometrySize" Value="0"/>
                <Setter Property="LineSmoothness" Value="0"/>
                <Setter Property="Fill" Value="Transparent"/>
                <Setter Property="DataLabels" Value="True"/>
            </Style>
        </Style.Resources>
    </Style>
    <!--Pie Chart-->
    <Style x:Key="PieChartStyle" TargetType="{x:Type lvchart:PieChart}">
        <Style.Resources>
            <Style TargetType="lvchart:DefaultTooltip">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </Style>
            <Style TargetType="lvchart:Axis">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            </Style>
            <Style TargetType="lvchart:PieSeries">
                <Setter Property="StrokeThickness" Value="0"/>
                <Setter Property="DataLabels" Value="True"/>
                <Setter Property="LabelPosition" Value="OutsideSlice"/>
                <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                <Setter Property="FontSize" Value="10"/>
            </Style>
        </Style.Resources>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
    </Style>
</ResourceDictionary>
